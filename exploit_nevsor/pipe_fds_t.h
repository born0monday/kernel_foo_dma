#ifndef PIPE_FDS_T_H
#define PIPE_FDS_T_H
#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>

#include "kernel_constants.h"

typedef int pipe_fd_t;

#define PIPE_NUM_PAGES_START (16)
#define PIPE_MAX_PAGES (256)

static char zero_buffer[PIPE_MAX_PAGES*PAGE_SIZE] = {0};

typedef struct {
    pipe_fd_t read_fd;
    pipe_fd_t write_fd;
    size_t num_pages_in_use;
    size_t num_pages;
    bool has_cached_page;
} pipe_fds_t;

void init_pipe_fds(pipe_fds_t *pipe_fds);
void destroy_pipe_fds(pipe_fds_t *pipe_fds);

void pipe_read_page(pipe_fds_t *pipe_fds, char *buffer);
void pipe_write_page(pipe_fds_t *pipe_fds, char *buffer);

void pipe_read_pages(pipe_fds_t *pipe_fds, size_t num_pages);
void pipe_write_pages(pipe_fds_t *pipe_fds, size_t num_pages);

void alloc_pipe_pages(pipe_fds_t *pipe_fds, size_t num_pages);
void free_pipe_pages(pipe_fds_t *pipe_fds, size_t num_pages);

void resize_pipe(pipe_fds_t *pipe_fds, size_t num_pages);

uint64_t pipe_read_qword(pipe_fds_t *pipe_fds);
void pipe_write_qword(pipe_fds_t *pipe_fds, uint64_t value);

#endif